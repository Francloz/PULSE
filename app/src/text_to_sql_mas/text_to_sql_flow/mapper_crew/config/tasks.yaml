abbreviation_solver_task:
  description: >
    Given this query "{query}"
    
    Return the same query **expanding all abbreviations** such as (BP, SpO, BMI) to the complete string, such as
    blood pressure or body mass index.
  agent: abbreviation_solver_agent
  expected_input: >
    query: string
  expected_output: >
    query: string
    

tag_task:
  description: >
    Given a free‐text query return the same query with each relevant entity wrapped in the appropriate 
    tag having searched any unknown terms to be assured of proper classification. Entities to tag include the following:

    - <CONDITION>: Diagnoses, signs, or symptoms indicating the presence of a disease or medical condition.
    - <DRUG>: Substances introduced into the body to treat or prevent a condition.
    - <PROCEDURE>: Clinical activities ordered or performed by healthcare providers for diagnosis or treatment.
    - <MEASUREMENT>: Structured data from clinical tests (e.g., lab tests, vital signs) with numerical or categorical results.
    - <VALUE>: Categorical results from measurements or observations, expressed as standardized concepts (e.g., Yes, No, Never).
    - <UNIT>: The unit associated with a numeric measurement (e.g., mg/dL, mmHg).
    - <OBSERVATION>: Clinical or contextual facts such as medical history, pregnancy, lifestyle, or social circumstances noted during examination or procedures.
    - <DEVICE>: Information about physical medical devices (e.g., implants, monitors) used diagnostically or therapeutically.
    - <VISIT_TYPE>: Type of healthcare encounter (e.g., inpatient, outpatient, emergency room).
    - <GENDER>: The biological sex of the individual.
    - <RACE>: The racial or ethnic background of the individual.
  agent: tagger_agent
  expected_input: >
    query: string

  expected_output: >
    A single string: the original query with entities wrapped in tags. Example:
    "Give me count of <GENDER>women</GENDER> who have <CONDITION>cancer</CONDITION>."
  

map_task:
  agent: mapper_agent
  description: >
    Given a tagged sentence (e.g., "Count of <GENDER>women</GENDER> with <CONDITION>cancer</CONDITION>"),
    extract all entities enclosed in XML-style tags.

    For each tagged entity:
      1. Extract the XML tag (e.g., GENDER, CONDITION).
      2. Extract the raw text inside the tag (e.g., “women”, “cancer”).
      3. Construct a list of **pairs** in the format [text, tag].
      4. Pass this list to the LinkMentionsTool to retrieve OMOP concept mapping candidates.
      5. Select the most appropriate concept for each entity (e.g., most relevant or highest-ranked).
    
    Only valid concepts from the OMOP vocabulary should be included in the final result.

    Ignore tags like <VALUE> or any unrecognized tags if they cannot be meaningfully mapped to OMOP concepts.

  expected_output: >
    A JSON array where each object contains:
      - tag: the original XML tag as a string (e.g., "GENDER")
      - text: the exact substring inside the tag (e.g., "women")
      - concept_id: the matched OMOP concept_id as an integer
      - concept_name: the matched OMOP concept_name as a string

    The output must exactly follow this structure:
    [
      {
        "tag": "GENDER",
        "text": "woman",
        "concept_id": 8532,
        "concept_name": "FEMALE"
      },
      {
        "tag": "CONDITION",
        "text": "cancer",
        "concept_id": 4194405,
        "concept_name": "Cancer confirmed"
      }
      ...
    ]

    

validate_task:
  agent: validator_agent
  description: >
    Given the mapping, format the output to follow the expected format.
  expected_output: |
    A json that represents the the concept_id of each entity. It should follow exactly this format:
    [
      {
        "tag": "GENDER",
        "text": "woman",
        "concept_id": 8532,
        "concept_name": "FEMALE"
      },
      {
        "tag": "CONDITION",
        "text": "cancer",
        "concept_id": 4194405,
        "concept_name": "Cancer confirmed"
      },
      ...
    ]